import React, { useState, useEffect } from 'react';
import { Mic, MicOff, Volume2, User, FileText, Search, CheckCircle, AlertCircle, Home, Phone, Mail, MapPin, Calendar, DollarSign, Users, Book, Heart, Briefcase, ChevronRight, Star, Award, Shield, Globe } from 'lucide-react';

const SarthiApp = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [isListening, setIsListening] = useState(false);
  const [voiceText, setVoiceText] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [userProfile, setUserProfile] = useState(null);
  const [eligibleSchemes, setEligibleSchemes] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedScheme, setSelectedScheme] = useState(null);
  const [applicationForm, setApplicationForm] = useState({});
  
  // Mock user data and schemes
  const mockSchemes = [
    {
      id: 1,
      name: "PM Kisan Samman Nidhi",
      nameHi: "‡§™‡•Ä‡§è‡§Æ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§®‡§ø‡§ß‡§ø",
      description: "Financial support of ‚Çπ6000 per year to small and marginal farmers",
      descriptionHi: "‡§õ‡•ã‡§ü‡•á ‡§î‡§∞ ‡§∏‡•Ä‡§Æ‡§æ‡§Ç‡§§ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡§∞‡•ç‡§∑ ‚Çπ6000 ‡§ï‡•Ä ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ",
      eligibility: "Farmers with landholding up to 2 hectares",
      amount: "‚Çπ6,000/year",
      category: "Agriculture",
      icon: "üåæ"
    },
    {
      id: 2,
      name: "Pradhan Mantri Awas Yojana",
      nameHi: "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§Ü‡§µ‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ",
      description: "Housing for all mission providing financial assistance for home construction",
      descriptionHi: "‡§∏‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§æ‡§∏ ‡§Æ‡§ø‡§∂‡§® ‡§ú‡•ã ‡§ò‡§∞ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
      eligibility: "EWS/LIG/MIG families without pucca house",
      amount: "Up to ‚Çπ2.67 Lakh",
      category: "Housing",
      icon: "üè†"
    },
    {
      id: 3,
      name: "Ayushman Bharat",
      nameHi: "‡§Ü‡§Ø‡•Å‡§∑‡•ç‡§Æ‡§æ‡§® ‡§≠‡§æ‡§∞‡§§",
      description: "Health insurance coverage up to ‚Çπ5 lakh per family per year",
      descriptionHi: "‡§™‡•ç‡§∞‡§§‡§ø ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡§∞‡•ç‡§∑ ‚Çπ5 ‡§≤‡§æ‡§ñ ‡§§‡§ï ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡§µ‡§∞‡•á‡§ú",
      eligibility: "Families identified in SECC-2011 database",
      amount: "‚Çπ5 Lakh/year",
      category: "Healthcare",
      icon: "üè•"
    },
    {
      id: 4,
      name: "PM Mudra Yojana",
      nameHi: "‡§™‡•Ä‡§è‡§Æ ‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ",
      description: "Micro-finance scheme for small businesses and entrepreneurs",
      descriptionHi: "‡§õ‡•ã‡§ü‡•á ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§â‡§¶‡•ç‡§Ø‡§Æ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã-‡§´‡§æ‡§á‡§®‡•á‡§Ç‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ",
      eligibility: "Small business owners, entrepreneurs",
      amount: "Up to ‚Çπ10 Lakh",
      category: "Business",
      icon: "üíº"
    }
  ];

  const languages = [
    { code: 'en', name: 'English', nativeName: 'English' },
    { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä' },
    { code: 'bn', name: 'Bengali', nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ' },
    { code: 'te', name: 'Telugu', nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å' },
    { code: 'ta', name: 'Tamil', nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç' }
  ];

  // Speech recognition setup
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.lang = selectedLanguage === 'hi' ? 'hi-IN' : 'en-US';

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setVoiceText(transcript);
        handleVoiceCommand(transcript);
      };

      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
      };

      recognition.onend = () => {
        setIsListening(false);
      };

      window.recognition = recognition;
    }
  }, [selectedLanguage]);

  const startListening = () => {
    if (window.recognition) {
      setIsListening(true);
      window.recognition.start();
    }
  };

  const stopListening = () => {
    if (window.recognition) {
      window.recognition.stop();
      setIsListening(false);
    }
  };

  const speak = (text) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = selectedLanguage === 'hi' ? 'hi-IN' : 'en-US';
      utterance.rate = 0.8;
      window.speechSynthesis.speak(utterance);
    }
  };

  const handleVoiceCommand = (command) => {
    const lowerCommand = command.toLowerCase();
    if (lowerCommand.includes('scheme') || lowerCommand.includes('‡§Ø‡•ã‡§ú‡§®‡§æ')) {
      setCurrentPage('schemes');
      speak(selectedLanguage === 'hi' ? '‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à' : 'Showing available schemes');
    } else if (lowerCommand.includes('profile') || lowerCommand.includes('‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤')) {
      setCurrentPage('profile');
      speak(selectedLanguage === 'hi' ? '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§™‡•á‡§ú ‡§ñ‡•ã‡§≤‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à' : 'Opening profile page');
    } else if (lowerCommand.includes('home') || lowerCommand.includes('‡§ò‡§∞')) {
      setCurrentPage('home');
      speak(selectedLanguage === 'hi' ? '‡§π‡•ã‡§Æ ‡§™‡•á‡§ú ‡§™‡§∞ ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç' : 'Going to home page');
    }
  };

  const mockEligibilityCheck = (userData) => {
    setIsLoading(true);
    setTimeout(() => {
      // Simple eligibility logic
      const eligible = [];
      if (userData.occupation === 'farmer' && userData.landSize <= 2) {
        eligible.push(mockSchemes[0]);
      }
      if (userData.income <= 300000) {
        eligible.push(mockSchemes[1], mockSchemes[2]);
      }
      if (userData.occupation === 'business') {
        eligible.push(mockSchemes[3]);
      }
      setEligibleSchemes(eligible);
      setIsLoading(false);
      setCurrentPage('results');
    }, 2000);
  };

  const translateText = (text, targetLang) => {
    // Mock translation - in real app, use Google Translate API
    const translations = {
      'Check Eligibility': { hi: '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç', en: 'Check Eligibility' },
      'My Profile': { hi: '‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤', en: 'My Profile' },
      'Available Schemes': { hi: '‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç', en: 'Available Schemes' },
      'Apply Now': { hi: '‡§Ö‡§≠‡•Ä ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç', en: 'Apply Now' },
      'Eligible Schemes': { hi: '‡§™‡§æ‡§§‡•ç‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç', en: 'Eligible Schemes' }
    };
    return translations[text] ? translations[text][targetLang] : text;
  };

  const HomePage = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {/* Header */}
      <div className="bg-white shadow-lg border-b-4 border-indigo-500">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-r from-indigo-500 to-purple-600 p-3 rounded-xl">
                <Shield className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                  Sarthi
                </h1>
                <p className="text-gray-600 text-sm">
                  {selectedLanguage === 'hi' ? '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï' : 'Government Scheme Navigator'}
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <select 
                value={selectedLanguage} 
                onChange={(e) => setSelectedLanguage(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              >
                {languages.map(lang => (
                  <option key={lang.code} value={lang.code}>{lang.nativeName}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Hero Section */}
      <div className="max-w-6xl mx-auto px-4 py-12">
        <div className="text-center mb-12">
          <h2 className="text-5xl font-bold text-gray-800 mb-6">
            {selectedLanguage === 'hi' ? '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§§‡§ï ‡§Ü‡§∏‡§æ‡§® ‡§™‡§π‡•Å‡§Ç‡§ö' : 'Easy Access to Government Schemes'}
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
            {selectedLanguage === 'hi' 
              ? 'AI-powered ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§∏‡§¨‡§∏‡•á ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à'
              : 'AI-powered assistant that checks your eligibility and recommends the most suitable government schemes'
            }
          </p>
        </div>

        {/* Voice Assistant */}
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-12 border-2 border-indigo-100">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-4">
              {selectedLanguage === 'hi' ? 'üé§ ‡§Ü‡§µ‡§æ‡§ú ‡§∏‡§π‡§æ‡§Ø‡§ï' : 'üé§ Voice Assistant'}
            </h3>
            <p className="text-gray-600 mb-6">
              {selectedLanguage === 'hi' 
                ? '‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç ‡§Ø‡§æ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç'
                : 'Ask about schemes or navigate by speaking'
              }
            </p>
            <div className="flex justify-center space-x-4">
              <button
                onClick={isListening ? stopListening : startListening}
                className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${
                  isListening 
                    ? 'bg-red-500 hover:bg-red-600 text-white animate-pulse' 
                    : 'bg-indigo-500 hover:bg-indigo-600 text-white hover:scale-105'
                }`}
              >
                {isListening ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
                <span>{isListening 
                  ? (selectedLanguage === 'hi' ? '‡§∏‡•Å‡§®‡§®‡§æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç' : 'Stop Listening') 
                  : (selectedLanguage === 'hi' ? '‡§¨‡•ã‡§≤‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç' : 'Start Speaking')
                }</span>
              </button>
              <button
                onClick={() => speak(selectedLanguage === 'hi' ? '‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§Æ‡•à‡§Ç ‡§∏‡§æ‡§∞‡•ç‡§•‡•Ä ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§' : 'Hello, I am Sarthi. I can help you with government schemes.')}
                className="flex items-center space-x-2 px-6 py-3 bg-green-500 hover:bg-green-600 text-white rounded-xl font-semibold transition-all duration-300 hover:scale-105"
              >
                <Volume2 className="h-5 w-5" />
                <span>{selectedLanguage === 'hi' ? '‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç' : 'Test Voice'}</span>
              </button>
            </div>
            {voiceText && (
              <div className="mt-4 p-4 bg-indigo-50 rounded-lg">
                <p className="text-indigo-800 font-medium">
                  {selectedLanguage === 'hi' ? '‡§Ü‡§™‡§®‡•á ‡§ï‡§π‡§æ:' : 'You said:'} "{voiceText}"
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid md:grid-cols-3 gap-8 mb-12">
          <div 
            onClick={() => setCurrentPage('profile')}
            className="bg-white rounded-2xl shadow-lg p-8 cursor-pointer transform hover:scale-105 transition-all duration-300 border-2 border-transparent hover:border-indigo-200"
          >
            <div className="text-center">
              <div className="bg-gradient-to-r from-blue-500 to-indigo-600 p-4 rounded-2xl w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <User className="h-8 w-8 text-white" />
              </div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                {translateText('My Profile', selectedLanguage)}
              </h3>
              <p className="text-gray-600">
                {selectedLanguage === 'hi' ? '‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç' : 'Enter your information'}
              </p>
            </div>
          </div>

          <div 
            onClick={() => setCurrentPage('schemes')}
            className="bg-white rounded-2xl shadow-lg p-8 cursor-pointer transform hover:scale-105 transition-all duration-300 border-2 border-transparent hover:border-green-200"
          >
            <div className="text-center">
              <div className="bg-gradient-to-r from-green-500 to-emerald-600 p-4 rounded-2xl w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <Search className="h-8 w-8 text-white" />
              </div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                {translateText('Available Schemes', selectedLanguage)}
              </h3>
              <p className="text-gray-600">
                {selectedLanguage === 'hi' ? '‡§∏‡§≠‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§¶‡•á‡§ñ‡•á‡§Ç' : 'Browse all schemes'}
              </p>
            </div>
          </div>

          <div 
            onClick={() => userProfile && mockEligibilityCheck(userProfile)}
            className="bg-white rounded-2xl shadow-lg p-8 cursor-pointer transform hover:scale-105 transition-all duration-300 border-2 border-transparent hover:border-purple-200"
          >
            <div className="text-center">
              <div className="bg-gradient-to-r from-purple-500 to-pink-600 p-4 rounded-2xl w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <CheckCircle className="h-8 w-8 text-white" />
              </div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                {translateText('Check Eligibility', selectedLanguage)}
              </h3>
              <p className="text-gray-600">
                {selectedLanguage === 'hi' ? '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç' : 'Find your eligible schemes'}
              </p>
            </div>
          </div>
        </div>

        {/* Features */}
        <div className="bg-white rounded-2xl shadow-xl p-8">
          <h3 className="text-2xl font-bold text-center text-gray-800 mb-8">
            {selectedLanguage === 'hi' ? 'üåü ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç' : 'üåü Key Features'}
          </h3>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div className="text-center p-4">
              <Globe className="h-12 w-12 text-indigo-500 mx-auto mb-3" />
              <h4 className="font-semibold text-gray-800 mb-2">
                {selectedLanguage === 'hi' ? '‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®' : 'Multi-language'}
              </h4>
              <p className="text-sm text-gray-600">
                {selectedLanguage === 'hi' ? '‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç' : 'Hindi and regional languages'}
              </p>
            </div>
            <div className="text-center p-4">
              <Mic className="h-12 w-12 text-green-500 mx-auto mb-3" />
              <h4 className="font-semibold text-gray-800 mb-2">
                {selectedLanguage === 'hi' ? '‡§Ü‡§µ‡§æ‡§ú ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®' : 'Voice Support'}
              </h4>
              <p className="text-sm text-gray-600">
                {selectedLanguage === 'hi' ? '‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç' : 'Navigate by speaking'}
              </p>
            </div>
            <div className="text-center p-4">
              <Award className="h-12 w-12 text-purple-500 mx-auto mb-3" />
              <h4 className="font-semibold text-gray-800 mb-2">
                {selectedLanguage === 'hi' ? '‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•à‡§ö‡§ø‡§Ç‡§ó' : 'Smart Matching'}
              </h4>
              <p className="text-sm text-gray-600">
                {selectedLanguage === 'hi' ? 'AI-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö' : 'AI-based eligibility check'}
              </p>
            </div>
            <div className="text-center p-4">
              <FileText className="h-12 w-12 text-orange-500 mx-auto mb-3" />
              <h4 className="font-semibold text-gray-800 mb-2">
                {selectedLanguage === 'hi' ? '‡§ë‡§ü‡•ã ‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡§®‡§æ' : 'Auto Form Fill'}
              </h4>
              <p className="text-sm text-gray-600">
                {selectedLanguage === 'hi' ? '‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§Ü‡§µ‡•á‡§¶‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ' : 'Automated application help'}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const ProfilePage = () => {
    const [formData, setFormData] = useState({
      name: '',
      age: '',
      income: '',
      occupation: '',
      landSize: '',
      familySize: '',
      state: '',
      district: '',
      category: '',
      phone: '',
      email: ''
    });

    const handleInputChange = (field, value) => {
      setFormData(prev => ({ ...prev, [field]: value }));
    };

    const handleSubmit = () => {
      setUserProfile(formData);
      speak(selectedLanguage === 'hi' ? '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à' : 'Profile saved successfully');
      setCurrentPage('home');
    };

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
              {selectedLanguage === 'hi' ? 'üë§ ‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤' : 'üë§ My Profile'}
            </h2>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§®‡§æ‡§Æ' : 'Full Name'}
                </label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç' : 'Enter your name'}
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§â‡§Æ‡•ç‡§∞' : 'Age'}
                </label>
                <input
                  type="number"
                  value={formData.age}
                  onChange={(e) => handleInputChange('age', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§â‡§Æ‡•ç‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç' : 'Enter age'}
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§Ü‡§Ø (‚Çπ)' : 'Annual Income (‚Çπ)'}
                </label>
                <input
                  type="number"
                  value={formData.income}
                  onChange={(e) => handleInputChange('income', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§Ü‡§Ø' : 'Annual income'}
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø' : 'Occupation'}
                </label>
                <select
                  value={formData.occupation}
                  onChange={(e) => handleInputChange('occupation', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                >
                  <option value="">{selectedLanguage === 'hi' ? '‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç' : 'Select occupation'}</option>
                  <option value="farmer">{selectedLanguage === 'hi' ? '‡§ï‡§ø‡§∏‡§æ‡§®' : 'Farmer'}</option>
                  <option value="laborer">{selectedLanguage === 'hi' ? '‡§Æ‡§ú‡§¶‡•Ç‡§∞' : 'Laborer'}</option>
                  <option value="business">{selectedLanguage === 'hi' ? '‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø' : 'Business'}</option>
                  <option value="unemployed">{selectedLanguage === 'hi' ? '‡§¨‡•á‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞' : 'Unemployed'}</option>
                  <option value="student">{selectedLanguage === 'hi' ? '‡§õ‡§æ‡§§‡•ç‡§∞' : 'Student'}</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§∞‡§æ‡§ú‡•ç‡§Ø' : 'State'}
                </label>
                <select
                  value={formData.state}
                  onChange={(e) => handleInputChange('state', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                >
                  <option value="">{selectedLanguage === 'hi' ? '‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç' : 'Select state'}</option>
                  <option value="up">{selectedLanguage === 'hi' ? '‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂' : 'Uttar Pradesh'}</option>
                  <option value="bihar">{selectedLanguage === 'hi' ? '‡§¨‡§ø‡§π‡§æ‡§∞' : 'Bihar'}</option>
                  <option value="mp">{selectedLanguage === 'hi' ? '‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂' : 'Madhya Pradesh'}</option>
                  <option value="rajasthan">{selectedLanguage === 'hi' ? '‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®' : 'Rajasthan'}</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§∏‡§¶‡§∏‡•ç‡§Ø' : 'Family Size'}
                </label>
                <input
                  type="number"
                  value={formData.familySize}
                  onChange={(e) => handleInputChange('familySize', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø' : 'Number of family members'}
                />
              </div>
            </div>

            <div className="mt-8 flex justify-center space-x-4">
              <button
                onClick={() => setCurrentPage('home')}
                className="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold transition-colors"
              >
                {selectedLanguage === 'hi' ? '‡§µ‡§æ‡§™‡§∏' : 'Back'}
              </button>
              <button
                onClick={handleSubmit}
                className="px-8 py-3 bg-indigo-500 hover:bg-indigo-600 text-white rounded-lg font-semibold transition-colors"
              >
                {selectedLanguage === 'hi' ? '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡§π‡•á‡§ú‡•á‡§Ç' : 'Save Profile'}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const SchemesPage = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
          {selectedLanguage === 'hi' ? 'üìã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç' : 'üìã Available Schemes'}
        </h2>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {mockSchemes.map(scheme => (
            <div key={scheme.id} className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-shadow">
              <div className="text-center mb-4">
                <div className="text-4xl mb-3">{scheme.icon}</div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  {selectedLanguage === 'hi' ? scheme.nameHi : scheme.name}
                </h3>
                <span className="inline-block px-3 py-1 bg-indigo-100 text-indigo-800 rounded-full text-sm font-medium">
                  {scheme.category}
                </span>
              </div>
              
              <p className="text-gray-600 mb-4 text-sm leading-relaxed">
                {selectedLanguage === 'hi' ? scheme.descriptionHi : scheme.description}
              </p>
              
              <div className="space-y-2 mb-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500">
                    {selectedLanguage === 'hi' ? '‡§∞‡§æ‡§∂‡§ø:' : 'Amount:'}
                  </span>
                  <span className="font-semibold text-green-600">{scheme.amount}</span>
                </div>
              </div>
              
              <button
                onClick={() => {
                  setSelectedScheme(scheme);
                  setCurrentPage('application');
                  speak(selectedLanguage === 'hi' ? `${scheme.nameHi} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡•á‡§¶‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç` : `Starting application for ${scheme.name}`);
                }}
                className="w-full bg-indigo-500 hover:bg-indigo-600 text-white py-2 px-4 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2"
              >
                <FileText className="h-4 w-4" />
                <span>{translateText('Apply Now', selectedLanguage)}</span>
              </button>
            </div>
          ))}
        </div>
        
        <div className="mt-8 text-center">
          <button
            onClick={() => setCurrentPage('home')}
            className="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold transition-colors"
          >
            {selectedLanguage === 'hi' ? '‡§µ‡§æ‡§™‡§∏ ‡§π‡•ã‡§Æ' : 'Back to Home'}
          </button>
        </div>
      </div>
    </div>
  );

  const ResultsPage = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
          {selectedLanguage === 'hi' ? 'üéØ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§æ‡§§‡•ç‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç' : 'üéØ Your Eligible Schemes'}
        </h2>
        
        {isLoading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-indigo-500 mx-auto mb-4"></div>
            <p className="text-lg text-gray-600">
              {selectedLanguage === 'hi' ? '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...' : 'Checking eligibility...'}
            </p>
          </div>
        ) : eligibleSchemes.length > 0 ? (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {eligibleSchemes.map(scheme => (
              <div key={scheme.id} className="bg-white rounded-2xl shadow-lg p-6 border-2 border-green-200">
                <div className="flex items-center justify-between mb-4">
                  <div className="text-3xl">{scheme.icon}</div>
                  <CheckCircle className="h-8 w-8 text-green-500" />
                </div>
                
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  {selectedLanguage === 'hi' ? scheme.nameHi : scheme.name}
                </h3>
                
                <p className="text-gray-600 mb-4 text-sm">
                  {selectedLanguage === 'hi' ? scheme.descriptionHi : scheme.description}
                </p>
                
                <div className="bg-green-50 p-3 rounded-lg mb-4">
                  <p className="text-green-800 font-semibold text-sm">
                    {selectedLanguage === 'hi' ? '‚úÖ ‡§Ü‡§™ ‡§á‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§æ‡§§‡•ç‡§∞ ‡§π‡•à‡§Ç!' : '‚úÖ You are eligible for this scheme!'}
                  </p>
                </div>
                
                <button
                  onClick={() => {
                    setSelectedScheme(scheme);
                    setCurrentPage('application');
                  }}
                  className="w-full bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg font-semibold transition-colors"
                >
                  {translateText('Apply Now', selectedLanguage)}
                </button>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <AlertCircle className="h-16 w-16 text-orange-500 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-gray-800 mb-2">
              {selectedLanguage === 'hi' ? '‡§ï‡•ã‡§à ‡§Æ‡•à‡§ö‡§ø‡§Ç‡§ó ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä' : 'No Matching Schemes Found'}
            </h3>
            <p className="text-gray-600 mb-6">
              {selectedLanguage === 'hi' 
                ? '‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Æ‡•à‡§ö ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§'
                : 'No schemes match your current information. Please update your profile.'
              }
            </p>
            <button
              onClick={() => setCurrentPage('profile')}
              className="px-6 py-3 bg-indigo-500 hover:bg-indigo-600 text-white rounded-lg font-semibold transition-colors"
            >
              {selectedLanguage === 'hi' ? '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç' : 'Update Profile'}
            </button>
          </div>
        )}
        
        <div className="mt-8 text-center">
          <button
            onClick={() => setCurrentPage('home')}
            className="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold transition-colors"
          >
            {selectedLanguage === 'hi' ? '‡§µ‡§æ‡§™‡§∏ ‡§π‡•ã‡§Æ' : 'Back to Home'}
          </button>
        </div>
      </div>
    </div>
  );

  const ApplicationPage = () => {
    const [formData, setFormData] = useState({
      applicantName: userProfile?.name || '',
      fatherName: '',
      address: '',
      bankAccount: '',
      ifscCode: '',
      documents: []
    });

    const handleSubmit = () => {
      speak(selectedLanguage === 'hi' ? 
        `${selectedScheme.nameHi} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡•á‡§¶‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡§Æ‡§æ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ` : 
        `Application for ${selectedScheme.name} submitted successfully`
      );
      setCurrentPage('home');
    };

    if (!selectedScheme) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="text-center">
            <AlertCircle className="h-16 w-16 text-orange-500 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-gray-800 mb-2">
              {selectedLanguage === 'hi' ? '‡§ï‡•ã‡§à ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ö‡•Å‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ó‡§à' : 'No Scheme Selected'}
            </h3>
            <button
              onClick={() => setCurrentPage('schemes')}
              className="px-6 py-3 bg-indigo-500 hover:bg-indigo-600 text-white rounded-lg font-semibold transition-colors"
            >
              {selectedLanguage === 'hi' ? '‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§¶‡•á‡§ñ‡•á‡§Ç' : 'View Schemes'}
            </button>
          </div>
        </div>
      );
    }

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="text-center mb-8">
              <div className="text-4xl mb-4">{selectedScheme.icon}</div>
              <h2 className="text-3xl font-bold text-gray-800 mb-2">
                {selectedLanguage === 'hi' ? selectedScheme.nameHi : selectedScheme.name}
              </h2>
              <p className="text-gray-600">
                {selectedLanguage === 'hi' ? '‡§Ü‡§µ‡•á‡§¶‡§® ‡§´‡•â‡§∞‡•ç‡§Æ' : 'Application Form'}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§Ü‡§µ‡•á‡§¶‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ' : 'Applicant Name'}
                </label>
                <input
                  type="text"
                  value={formData.applicantName}
                  onChange={(e) => setFormData(prev => ({...prev, applicantName: e.target.value}))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ' : 'Full name'}
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ' : 'Father\'s Name'}
                </label>
                <input
                  type="text"
                  value={formData.fatherName}
                  onChange={(e) => setFormData(prev => ({...prev, fatherName: e.target.value}))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ' : 'Father\'s name'}
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§™‡•Ç‡§∞‡§æ ‡§™‡§§‡§æ' : 'Complete Address'}
                </label>
                <textarea
                  value={formData.address}
                  onChange={(e) => setFormData(prev => ({...prev, address: e.target.value}))}
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§™‡•Ç‡§∞‡§æ ‡§™‡§§‡§æ ‡§≤‡§ø‡§ñ‡•á‡§Ç' : 'Enter complete address'}
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? '‡§¨‡•à‡§Ç‡§ï ‡§ñ‡§æ‡§§‡§æ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ' : 'Bank Account Number'}
                </label>
                <input
                  type="text"
                  value={formData.bankAccount}
                  onChange={(e) => setFormData(prev => ({...prev, bankAccount: e.target.value}))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? '‡§ñ‡§æ‡§§‡§æ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ' : 'Account number'}
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  {selectedLanguage === 'hi' ? 'IFSC ‡§ï‡•ã‡§°' : 'IFSC Code'}
                </label>
                <input
                  type="text"
                  value={formData.ifscCode}
                  onChange={(e) => setFormData(prev => ({...prev, ifscCode: e.target.value}))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder={selectedLanguage === 'hi' ? 'IFSC ‡§ï‡•ã‡§°' : 'IFSC code'}
                />
              </div>
            </div>

            <div className="mt-8 p-6 bg-blue-50 rounded-lg">
              <h4 className="font-semibold text-blue-800 mb-2">
                {selectedLanguage === 'hi' ? 'üìÑ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú' : 'üìÑ Required Documents'}
              </h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°' : 'Aadhaar Card'}</li>
                <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§¨‡•à‡§Ç‡§ï ‡§™‡§æ‡§∏‡§¨‡•Å‡§ï' : 'Bank Passbook'}</li>
                <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§Ü‡§Ø ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§™‡§§‡•ç‡§∞' : 'Income Certificate'}</li>
                <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§®‡§ø‡§µ‡§æ‡§∏ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§™‡§§‡•ç‡§∞' : 'Residence Certificate'}</li>
              </ul>
            </div>

            <div className="mt-8 flex justify-center space-x-4">
              <button
                onClick={() => setCurrentPage('schemes')}
                className="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold transition-colors"
              >
                {selectedLanguage === 'hi' ? '‡§µ‡§æ‡§™‡§∏' : 'Back'}
              </button>
              <button
                onClick={handleSubmit}
                className="px-8 py-3 bg-green-500 hover:bg-green-600 text-white rounded-lg font-semibold transition-colors flex items-center space-x-2"
              >
                <CheckCircle className="h-5 w-5" />
                <span>{selectedLanguage === 'hi' ? '‡§Ü‡§µ‡•á‡§¶‡§® ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç' : 'Submit Application'}</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Bottom Navigation
  const BottomNav = () => (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2">
      <div className="flex justify-around max-w-md mx-auto">
        <button
          onClick={() => setCurrentPage('home')}
          className={`flex flex-col items-center py-2 px-3 rounded-lg transition-colors ${
            currentPage === 'home' ? 'text-indigo-600 bg-indigo-50' : 'text-gray-600'
          }`}
        >
          <Home className="h-6 w-6 mb-1" />
          <span className="text-xs">{selectedLanguage === 'hi' ? '‡§π‡•ã‡§Æ' : 'Home'}</span>
        </button>
        
        <button
          onClick={() => setCurrentPage('profile')}
          className={`flex flex-col items-center py-2 px-3 rounded-lg transition-colors ${
            currentPage === 'profile' ? 'text-indigo-600 bg-indigo-50' : 'text-gray-600'
          }`}
        >
          <User className="h-6 w-6 mb-1" />
          <span className="text-xs">{selectedLanguage === 'hi' ? '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤' : 'Profile'}</span>
        </button>
        
        <button
          onClick={() => setCurrentPage('schemes')}
          className={`flex flex-col items-center py-2 px-3 rounded-lg transition-colors ${
            currentPage === 'schemes' ? 'text-indigo-600 bg-indigo-50' : 'text-gray-600'
          }`}
        >
          <Search className="h-6 w-6 mb-1" />
          <span className="text-xs">{selectedLanguage === 'hi' ? '‡§Ø‡•ã‡§ú‡§®‡§æ' : 'Schemes'}</span>
        </button>
        
        <button
          onClick={isListening ? stopListening : startListening}
          className={`flex flex-col items-center py-2 px-3 rounded-lg transition-colors ${
            isListening ? 'text-red-600 bg-red-50' : 'text-gray-600'
          }`}
        >
          {isListening ? <MicOff className="h-6 w-6 mb-1" /> : <Mic className="h-6 w-6 mb-1" />}
          <span className="text-xs">{selectedLanguage === 'hi' ? '‡§Ü‡§µ‡§æ‡§ú' : 'Voice'}</span>
        </button>
      </div>
    </div>
  );

  const renderCurrentPage = () => {
    switch (currentPage) {
      case 'profile':
        return <ProfilePage />;
      case 'schemes':
        return <SchemesPage />;
      case 'results':
        return <ResultsPage />;
      case 'application':
        return <ApplicationPage />;
      default:
        return <HomePage />;
    }
  };

  return (
    <div className="pb-20">
      {renderCurrentPage()}
      <BottomNav />
    </div>
  );
};

export default SarthiApp;
